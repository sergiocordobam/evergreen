#!/usr/bin/env python3
"""
Script de prueba para el Sistema de An√°lisis de Producci√≥n
Este script demuestra c√≥mo usar la API generada con datos de ejemplo
"""

import requests
import json
from datetime import datetime

# URL base de la API (ajustar si es necesario)
BASE_URL = "http://localhost:8000"

def test_api():
    print("üöÄ Iniciando pruebas del Sistema de An√°lisis de Producci√≥n")
    print("=" * 60)
    
    # 1. Obtener cat√°logo de productores
    print("\nüìã 1. Obteniendo cat√°logo de productores...")
    try:
        response = requests.get(f"{BASE_URL}/catalogo/productores")
        if response.status_code == 200:
            productores = response.json()
            print(f"‚úÖ Encontrados {len(productores)} productores")
            for p in productores:
                print(f"   - {p['nombre']} (ID: {p['id']}, √Årea: {p['area']})")
        else:
            print(f"‚ùå Error: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå No se puede conectar al servidor. Aseg√∫rate de que la API est√© ejecut√°ndose.")
        return
    
    # 2. Obtener cat√°logo de productos
    print("\nüìã 2. Obteniendo cat√°logo de productos...")
    try:
        response = requests.get(f"{BASE_URL}/catalogo/productos")
        if response.status_code == 200:
            productos = response.json()
            print(f"‚úÖ Encontrados {len(productos)} productos")
            for p in productos:
                print(f"   - {p['nombre']} (ID: {p['id']})")
        else:
            print(f"‚ùå Error: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n")
        return
    
    # 3. Generar reporte consolidado
    print("\nüìä 3. Generando reporte consolidado...")
    try:
        response = requests.get(f"{BASE_URL}/reporte/consolidado")
        if response.status_code == 200:
            print("‚úÖ Reporte consolidado generado exitosamente")
            print("   (Archivo Excel descargado)")
        else:
            print(f"‚ùå Error: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n")
    
    # 4. Ejemplo de gr√°fica hist√≥rica (asumiendo productor ID 1)
    print("\nüìà 4. Generando gr√°fica hist√≥rica para productor ID 1...")
    try:
        response = requests.get(f"{BASE_URL}/grafica/historico/1")
        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Gr√°fica hist√≥rica generada exitosamente")
            print(f"   Total cantidad: {data['resumen']['total_cantidad']}")
            print(f"   Total costos: {data['resumen']['total_costos']}")
        else:
            print(f"‚ùå Error: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n")
    
    # 5. Top productores (asumiendo producto ID 1, cantidad m√≠nima 50)
    print("\nüèÜ 5. Obteniendo top productores para producto ID 1...")
    try:
        response = requests.get(f"{BASE_URL}/reporte/top-productores?producto_id=1&cantidad_minima=50")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Encontrados {data['total_productores']} productores")
            for p in data['productores']:
                print(f"   - {p['Productor']}: {p['Total_Cantidad']} unidades")
        else:
            print(f"‚ùå Error: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n")
    
    # 6. Resumen de costos (asumiendo productor ID 1)
    print("\nüí∞ 6. Obteniendo resumen de costos para productor ID 1...")
    try:
        response = requests.get(f"{BASE_URL}/reporte/resumen-costos/1")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Total costos general: {data['total_costos_general']}")
            print(f"   N√∫mero de productos: {data['num_productos']}")
            for p in data['resumen_por_producto']:
                print(f"   - {p['Producto']}: {p['Total_Costos']} costos")
        else:
            print(f"‚ùå Error: {response.status_code}")
    except requests.exceptions.ConnectionError:
        print("‚ùå Error de conexi√≥n")
    
    print("\n" + "=" * 60)
    print("‚úÖ Pruebas completadas")
    print("\nüí° Para ejecutar la API:")
    print("   uvicorn main:app --reload")
    print("\nüìö Documentaci√≥n interactiva:")
    print("   http://localhost:8000/docs")

if __name__ == "__main__":
    test_api()
